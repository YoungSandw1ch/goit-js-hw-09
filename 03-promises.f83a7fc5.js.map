{"mappings":"AA6GA,IAA0BA,EAAGC,GAAHD,EAYQ,kBAZLC,EAYwB,0BAX5C,IAAIC,SAAQ,CAACC,EAASC,KACZC,KAAKC,SAAW,IAG7BH,EAAQH,GAGVI,EAAOH,OAQRM,MAAKC,IACJC,QAAQC,IAAIF,GACLA,KAERD,MAAKC,IACJC,QAAQC,IAAIF,EAAO,mBACZ,eAERG,OAAMC,GAASH,QAAQC,IAAIE,KAC3BC,SAAQ,IAAMJ,QAAQC,IAAI","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const refs = {\n//   form: document.querySelector('.form'),\n//   // submitBtn: document.querySelector('.form button'),\n// };\n// const formData = {};\n// let position = 1;\n\n// refs.form.addEventListener('click', onFormSubmit);\n// refs.form.addEventListener('change', onFormFildChange);\n\n// function onFormFildChange(e) {\n//   formData[e.target.name] = e.target.value;\n//   // console.log(formData);\n// }\n\n// function onFormSubmit(e) {\n//   e.preventDefault();\n\n//   console.log(e.target.nodeName);\n//   if (e.target.nodeName !== 'BUTTON') return;\n\n//   const { delay, step, amount } = formData;\n//   console.log(formData);\n//   console.log(delay);\n\n//   createPromise(position, delay)\n//     .then((position, delay) => {\n//       console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//     })\n//     .catch((position, delay) => {\n//       console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//     });\n\n//   // const intervalId = setInterval(() => {\n//   //   if (position === amount) clearInterval(intervalId);\n//   //   position += 1;\n//   //   console.log(position);\n//   // }, delay);\n// }\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   if (shouldResolve) {\n//     // Fulfill\n//     return Promise.resolve({ position, delay });\n//   } else {\n//     // Reject\n//     return Promise.reject({ position, delay });\n//   }\n// }\n\n// // createPromise(2, 1500)\n// //   .then(({ position, delay }) => {\n// //     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// //   })\n// //   .catch(({ position, delay }) => {\n// //     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n// //   });\n\n// function notifySucces({ position, delay }) {\n//   Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n// }\n\n// function notifyFailure({ position, delay }) {\n//   Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n// }\n\n// const promise = new Promise((resolve, reject) => {});\n\n// console.log(promise);\n\n// function makePromise(x, y) {\n//   return new Promise((resolve, reject) => {\n//     const isDone = Math.random() > 0.5;\n\n//     if (isDone) {\n//       resolve(x);\n//     }\n\n//     reject(y);\n//   });\n// }\n\n// console.log(makePromise(100, 50));\n\n// const mdnPromise = new Promise((resolve, reject) => {\n//   setTimeout(() => {\n//     const isDone = Math.random() > 0.5;\n\n//     if (isDone) {\n//       resolve(\n//         'то что ты передашь то и получить в результате промиса или инфу которую ты запрашивал'\n//       );\n//     }\n\n//     reject({ 'что то пошло не так, извини братишка': 1, 10: 10 });\n//   }, 2000);\n// });\n\n// console.log(mdnPromise);\n// console.log(\n//   mdnPromise.then(value => {\n//     console.log(value);\n//     return value.split('');\n//   })\n// );\n\nfunction createPromiseFnk(x, y) {\n  return new Promise((resolve, reject) => {\n    const isDone = Math.random() > 0.5;\n\n    if (isDone) {\n      resolve(x);\n    }\n\n    reject(y);\n  });\n}\n\nconst promise1 = createPromiseFnk('all system work', 'tobi p... tikai z mista');\n\n// console.log(promise1);\npromise1\n  .then(data => {\n    console.log(data);\n    return data;\n  })\n  .then(data => {\n    console.log(data + 'NOrmalno then 2');\n    return 'otrabotal';\n  })\n  .catch(error => console.log(error))\n  .finally(() => console.log('вот и все отработал'));\n"],"names":["x","y","Promise","resolve","reject","Math","random","then","data","console","log","catch","error","finally"],"version":3,"file":"03-promises.f83a7fc5.js.map"}